package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.Dao.NoticBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTIC_BEAN".
*/
public class NoticBeanDao extends AbstractDao<NoticBean, Long> {

    public static final String TABLENAME = "NOTIC_BEAN";

    /**
     * Properties of entity NoticBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FNoticeId = new Property(1, String.class, "FNoticeId", false, "FNOTICE_ID");
        public final static Property FBillNo = new Property(2, String.class, "FBillNo", false, "FBILL_NO");
        public final static Property FNumAll = new Property(3, String.class, "FNumAll", false, "FNUM_ALL");
        public final static Property FType = new Property(4, String.class, "FType", false, "FTYPE");
        public final static Property FActivityType = new Property(5, String.class, "FActivityType", false, "FACTIVITY_TYPE");
        public final static Property FTime = new Property(6, String.class, "FTime", false, "FTIME");
        public final static Property FRemark = new Property(7, String.class, "FRemark", false, "FREMARK");
    }


    public NoticBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NoticBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTIC_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FNOTICE_ID\" TEXT," + // 1: FNoticeId
                "\"FBILL_NO\" TEXT," + // 2: FBillNo
                "\"FNUM_ALL\" TEXT," + // 3: FNumAll
                "\"FTYPE\" TEXT," + // 4: FType
                "\"FACTIVITY_TYPE\" TEXT," + // 5: FActivityType
                "\"FTIME\" TEXT," + // 6: FTime
                "\"FREMARK\" TEXT);"); // 7: FRemark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTIC_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoticBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FNoticeId = entity.getFNoticeId();
        if (FNoticeId != null) {
            stmt.bindString(2, FNoticeId);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(3, FBillNo);
        }
 
        String FNumAll = entity.getFNumAll();
        if (FNumAll != null) {
            stmt.bindString(4, FNumAll);
        }
 
        String FType = entity.getFType();
        if (FType != null) {
            stmt.bindString(5, FType);
        }
 
        String FActivityType = entity.getFActivityType();
        if (FActivityType != null) {
            stmt.bindString(6, FActivityType);
        }
 
        String FTime = entity.getFTime();
        if (FTime != null) {
            stmt.bindString(7, FTime);
        }
 
        String FRemark = entity.getFRemark();
        if (FRemark != null) {
            stmt.bindString(8, FRemark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoticBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FNoticeId = entity.getFNoticeId();
        if (FNoticeId != null) {
            stmt.bindString(2, FNoticeId);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(3, FBillNo);
        }
 
        String FNumAll = entity.getFNumAll();
        if (FNumAll != null) {
            stmt.bindString(4, FNumAll);
        }
 
        String FType = entity.getFType();
        if (FType != null) {
            stmt.bindString(5, FType);
        }
 
        String FActivityType = entity.getFActivityType();
        if (FActivityType != null) {
            stmt.bindString(6, FActivityType);
        }
 
        String FTime = entity.getFTime();
        if (FTime != null) {
            stmt.bindString(7, FTime);
        }
 
        String FRemark = entity.getFRemark();
        if (FRemark != null) {
            stmt.bindString(8, FRemark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NoticBean readEntity(Cursor cursor, int offset) {
        NoticBean entity = new NoticBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FNoticeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FBillNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FNumAll
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FActivityType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // FRemark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoticBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFNoticeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFBillNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFNumAll(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFActivityType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NoticBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NoticBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoticBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
